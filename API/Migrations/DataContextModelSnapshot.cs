// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Agence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Agences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nom = "Ariana"
                        },
                        new
                        {
                            Id = 2,
                            Nom = "Béja"
                        },
                        new
                        {
                            Id = 3,
                            Nom = "Ben Arous"
                        },
                        new
                        {
                            Id = 4,
                            Nom = "Bizerte"
                        },
                        new
                        {
                            Id = 5,
                            Nom = "Gabès"
                        },
                        new
                        {
                            Id = 6,
                            Nom = "Gafsa"
                        },
                        new
                        {
                            Id = 7,
                            Nom = "Jendouba"
                        },
                        new
                        {
                            Id = 8,
                            Nom = "Kairouan"
                        },
                        new
                        {
                            Id = 9,
                            Nom = "Kasserine"
                        },
                        new
                        {
                            Id = 10,
                            Nom = "Kébili"
                        },
                        new
                        {
                            Id = 11,
                            Nom = "Kef"
                        },
                        new
                        {
                            Id = 12,
                            Nom = "Mahdia"
                        },
                        new
                        {
                            Id = 13,
                            Nom = "Manouba"
                        },
                        new
                        {
                            Id = 14,
                            Nom = "Médenine"
                        },
                        new
                        {
                            Id = 15,
                            Nom = "Monastir"
                        },
                        new
                        {
                            Id = 16,
                            Nom = "Nabeul"
                        },
                        new
                        {
                            Id = 17,
                            Nom = "Sfax"
                        },
                        new
                        {
                            Id = 18,
                            Nom = "Sidi Bouzid"
                        },
                        new
                        {
                            Id = 19,
                            Nom = "Siliana"
                        },
                        new
                        {
                            Id = 20,
                            Nom = "Sousse"
                        },
                        new
                        {
                            Id = 21,
                            Nom = "Tataouine"
                        },
                        new
                        {
                            Id = 22,
                            Nom = "Tozeur"
                        },
                        new
                        {
                            Id = 23,
                            Nom = "Tunis"
                        },
                        new
                        {
                            Id = 24,
                            Nom = "Zaghouan"
                        });
                });

            modelBuilder.Entity("API.Models.CartEvenement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Canal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HeureEnvoi")
                        .HasColumnType("datetime2");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarteId");

                    b.HasIndex("TemplateId");

                    b.ToTable("CartEvenements");
                });

            modelBuilder.Entity("API.Models.Carte", b =>
                {
                    b.Property<int>("NumeroCarte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NumeroCarte"));

                    b.Property<int>("Bin")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDelivrance")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mobile")
                        .HasColumnType("int");

                    b.Property<int>("PlafondGAB")
                        .HasColumnType("int");

                    b.Property<int>("PlafondTPE")
                        .HasColumnType("int");

                    b.Property<int>("ResteGAB")
                        .HasColumnType("int");

                    b.Property<int>("ResteTPE")
                        .HasColumnType("int");

                    b.Property<bool>("Statut")
                        .HasColumnType("bit");

                    b.HasKey("NumeroCarte");

                    b.HasIndex("ClientId");

                    b.ToTable("Cartes", t =>
                        {
                            t.HasTrigger("CartDateExpirationTrigger");

                            t.HasTrigger("CartStatutTrigger");

                            t.HasTrigger("CarteInsertTrigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);

                    b.HasData(
                        new
                        {
                            NumeroCarte = 1001,
                            Bin = 123456,
                            ClientId = 1,
                            DateDelivrance = new DateTime(2023, 5, 25, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3936),
                            DateExpiration = new DateTime(2027, 5, 24, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3938),
                            Mobile = 123456789,
                            PlafondGAB = 500,
                            PlafondTPE = 1000,
                            ResteGAB = 500,
                            ResteTPE = 1000,
                            Statut = true
                        },
                        new
                        {
                            NumeroCarte = 1002,
                            Bin = 987654,
                            ClientId = 2,
                            DateDelivrance = new DateTime(2023, 4, 20, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3946),
                            DateExpiration = new DateTime(2028, 5, 24, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3947),
                            Mobile = 987654321,
                            PlafondGAB = 1000,
                            PlafondTPE = 2000,
                            ResteGAB = 800,
                            ResteTPE = 1800,
                            Statut = true
                        },
                        new
                        {
                            NumeroCarte = 1003,
                            Bin = 654321,
                            ClientId = 1,
                            DateDelivrance = new DateTime(2023, 7, 29, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3951),
                            DateExpiration = new DateTime(2026, 5, 24, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3952),
                            Mobile = 111222333,
                            PlafondGAB = 800,
                            PlafondTPE = 1500,
                            ResteGAB = 600,
                            ResteTPE = 1200,
                            Statut = true
                        },
                        new
                        {
                            NumeroCarte = 1004,
                            Bin = 987123,
                            ClientId = 3,
                            DateDelivrance = new DateTime(2023, 11, 6, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(4047),
                            DateExpiration = new DateTime(2027, 5, 24, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(4048),
                            Mobile = 444555666,
                            PlafondGAB = 1200,
                            PlafondTPE = 2500,
                            ResteGAB = 1000,
                            ResteTPE = 2200,
                            Statut = false
                        });
                });

            modelBuilder.Entity("API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Carte"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Credit"
                        });
                });

            modelBuilder.Entity("API.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdresseEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AgenceId")
                        .HasColumnType("int");

                    b.Property<string>("CanalPrefere")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresse = "123 Main St",
                            AdresseEmail = "john.doe@example.com",
                            AgenceId = 1,
                            CanalPrefere = "WHATSAPP",
                            DateNaissance = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "John",
                            NumeroTelephone = "555-1234",
                            Prenom = "Doe"
                        },
                        new
                        {
                            Id = 2,
                            Adresse = "456 Elm St",
                            AdresseEmail = "jane.smith@example.com",
                            AgenceId = 2,
                            CanalPrefere = "SMS",
                            DateNaissance = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Jane",
                            NumeroTelephone = "555-5678",
                            Prenom = "Smith"
                        },
                        new
                        {
                            Id = 3,
                            Adresse = "123 Main St",
                            AdresseEmail = "john.doe@example.com",
                            AgenceId = 1,
                            CanalPrefere = "WHATSAPP",
                            DateNaissance = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "John",
                            NumeroTelephone = "555-1234",
                            Prenom = "Doe"
                        },
                        new
                        {
                            Id = 4,
                            Adresse = "456 Elm St",
                            AdresseEmail = "jane.smith@example.com",
                            AgenceId = 2,
                            CanalPrefere = "SMS",
                            DateNaissance = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Jane",
                            NumeroTelephone = "555-5678",
                            Prenom = "Smith"
                        },
                        new
                        {
                            Id = 5,
                            Adresse = "789 Oak St",
                            AdresseEmail = "michael.johnson@example.com",
                            AgenceId = 3,
                            CanalPrefere = "EMAIL",
                            DateNaissance = new DateTime(1982, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Michael",
                            NumeroTelephone = "555-7890",
                            Prenom = "Johnson"
                        });
                });

            modelBuilder.Entity("API.Models.ClientNotification", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("ClientId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("ClientNotifications");
                });

            modelBuilder.Entity("API.Models.Compte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOuvertureCompte")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumeroCompte")
                        .HasColumnType("int");

                    b.Property<decimal>("SoldeCompte")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("StatutCompte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeCompte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Comptes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            DateOuvertureCompte = new DateTime(2024, 5, 24, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3763),
                            NumeroCompte = 1001,
                            SoldeCompte = 1000m,
                            StatutCompte = "Active",
                            TypeCompte = "Checking"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            DateOuvertureCompte = new DateTime(2024, 5, 24, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3768),
                            NumeroCompte = 1002,
                            SoldeCompte = 2000m,
                            StatutCompte = "Active",
                            TypeCompte = "Savings"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            DateOuvertureCompte = new DateTime(2024, 5, 24, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3771),
                            NumeroCompte = 1003,
                            SoldeCompte = 1500m,
                            StatutCompte = "Active",
                            TypeCompte = "Investment"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 1,
                            DateOuvertureCompte = new DateTime(2024, 5, 24, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3773),
                            NumeroCompte = 1004,
                            SoldeCompte = 3000m,
                            StatutCompte = "Active",
                            TypeCompte = "Credit"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 2,
                            DateOuvertureCompte = new DateTime(2024, 5, 24, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3776),
                            NumeroCompte = 1005,
                            SoldeCompte = 5000m,
                            StatutCompte = "Active",
                            TypeCompte = "Loan"
                        });
                });

            modelBuilder.Entity("API.Models.Credit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompteId")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditMensuelle")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("JourPaiement")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastVerificationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MontantCredit")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("RestCredit")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("Id");

                    b.HasIndex("CompteId");

                    b.ToTable("Credits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompteId = 1,
                            CreditMensuelle = 100m,
                            JourPaiement = 1,
                            LastVerificationDate = new DateTime(2024, 5, 10, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3239),
                            MontantCredit = 500m,
                            RestCredit = 500m
                        },
                        new
                        {
                            Id = 2,
                            CompteId = 2,
                            CreditMensuelle = 200m,
                            JourPaiement = 5,
                            LastVerificationDate = new DateTime(2024, 5, 10, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3239),
                            MontantCredit = 1000m,
                            RestCredit = 800m
                        },
                        new
                        {
                            Id = 3,
                            CompteId = 3,
                            CreditMensuelle = 300m,
                            JourPaiement = 10,
                            LastVerificationDate = new DateTime(2024, 5, 10, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3239),
                            MontantCredit = 1200m,
                            RestCredit = 1000m
                        },
                        new
                        {
                            Id = 4,
                            CompteId = 4,
                            CreditMensuelle = 150m,
                            JourPaiement = 15,
                            LastVerificationDate = new DateTime(2024, 5, 10, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3239),
                            MontantCredit = 800m,
                            RestCredit = 500m
                        },
                        new
                        {
                            Id = 5,
                            CompteId = 5,
                            CreditMensuelle = 100m,
                            JourPaiement = 20,
                            LastVerificationDate = new DateTime(2024, 5, 10, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3239),
                            MontantCredit = 600m,
                            RestCredit = 300m
                        },
                        new
                        {
                            Id = 6,
                            CompteId = 1,
                            CreditMensuelle = 250m,
                            JourPaiement = 25,
                            LastVerificationDate = new DateTime(2024, 5, 10, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3239),
                            MontantCredit = 1500m,
                            RestCredit = 1200m
                        },
                        new
                        {
                            Id = 7,
                            CompteId = 2,
                            CreditMensuelle = 300m,
                            JourPaiement = 3,
                            LastVerificationDate = new DateTime(2024, 5, 10, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3239),
                            MontantCredit = 2000m,
                            RestCredit = 1500m
                        },
                        new
                        {
                            Id = 8,
                            CompteId = 3,
                            CreditMensuelle = 150m,
                            JourPaiement = 7,
                            LastVerificationDate = new DateTime(2024, 5, 10, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3239),
                            MontantCredit = 700m,
                            RestCredit = 400m
                        },
                        new
                        {
                            Id = 9,
                            CompteId = 4,
                            CreditMensuelle = 200m,
                            JourPaiement = 12,
                            LastVerificationDate = new DateTime(2024, 5, 10, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3239),
                            MontantCredit = 900m,
                            RestCredit = 700m
                        },
                        new
                        {
                            Id = 10,
                            CompteId = 5,
                            CreditMensuelle = 300m,
                            JourPaiement = 18,
                            LastVerificationDate = new DateTime(2024, 5, 10, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3239),
                            MontantCredit = 1500m,
                            RestCredit = 1200m
                        });
                });

            modelBuilder.Entity("API.Models.CreditEvenement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Canal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreditId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HeureEnvoi")
                        .HasColumnType("datetime2");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditId");

                    b.HasIndex("TemplateId");

                    b.ToTable("CreditEvenements");
                });

            modelBuilder.Entity("API.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("API.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMSMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WhatsMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("API.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("EmailBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMSMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Templates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            EmailBody = "Votre nouvelle carte est prête à être utilisée.",
                            SMSMessage = "Votre nouvelle carte est activée.",
                            Type = "Nouvelle Carte",
                            WhatsMessage = "Votre nouvelle carte est prête à l'emploi."
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            EmailBody = "Votre carte a été activée avec succès.",
                            SMSMessage = "Votre carte est maintenant active.",
                            Type = "Carte Activé",
                            WhatsMessage = "Votre carte est activée et prête à l'emploi."
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            EmailBody = "Votre carte a été bloquée. Veuillez contacter le support.",
                            SMSMessage = "Votre carte est bloquée. Contactez le support.",
                            Type = "Carte Bloqué",
                            WhatsMessage = "Votre carte est bloquée. Veuillez nous contacter."
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            EmailBody = "Votre carte expirera bientôt. Veuillez la renouveler.",
                            SMSMessage = "Votre carte expirera bientôt.",
                            Type = "Carte Expiration",
                            WhatsMessage = "Votre carte arrive à expiration. Pensez à la renouveler."
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            EmailBody = "Votre paiement a été confirmé avec succès.",
                            SMSMessage = "Paiement confirmé. Merci.",
                            Type = "Confirmation de Paiement",
                            WhatsMessage = "Votre paiement a été effectué avec succès."
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            EmailBody = "Un rappel pour votre paiement en attente.",
                            SMSMessage = "Rappel: paiement en attente.",
                            Type = "Rappel de Paiement",
                            WhatsMessage = "N'oubliez pas de régler votre paiement en attente."
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            EmailBody = "Votre prêt est terminé. Merci de votre fidélité.",
                            SMSMessage = "Prêt terminé. Merci.",
                            Type = "Notification de fin de prêt",
                            WhatsMessage = "Votre prêt est terminé. Nous vous remercions pour votre confiance."
                        });
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgenceId")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Etat")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeGeneratedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgenceId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgenceId = 23,
                            AvatarUrl = "",
                            DateCreated = new DateTime(2024, 5, 24, 15, 51, 44, 878, DateTimeKind.Local).AddTicks(3635),
                            Email = "admin@contact.com",
                            Etat = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            Login = "Admin",
                            PasswordHash = new byte[] { 149, 224, 181, 24, 49, 89, 201, 81, 16, 217, 204, 141, 40, 45, 43, 48, 119, 49, 143, 33, 3, 195, 208, 45, 157, 229, 137, 110, 186, 8, 117, 245, 205, 124, 11, 191, 115, 86, 36, 73, 204, 207, 180, 222, 234, 47, 186, 52, 224, 171, 243, 67, 123, 84, 21, 131, 122, 25, 219, 239, 233, 174, 31, 20 },
                            PasswordSalt = new byte[] { 61, 167, 213, 208, 242, 197, 185, 165, 95, 254, 208, 217, 192, 34, 32, 196, 76, 66, 230, 130, 58, 122, 50, 103, 104, 35, 32, 188, 183, 197, 2, 171, 136, 12, 176, 26, 152, 85, 56, 38, 199, 238, 91, 22, 226, 224, 232, 172, 98, 66, 95, 219, 23, 252, 6, 62, 194, 98, 120, 30, 242, 171, 221, 162, 42, 3, 165, 42, 155, 214, 129, 229, 104, 193, 72, 93, 128, 227, 244, 215, 16, 132, 237, 191, 86, 246, 29, 16, 142, 98, 194, 21, 199, 161, 229, 124, 29, 67, 124, 100, 27, 11, 200, 219, 20, 84, 250, 228, 31, 215, 120, 87, 220, 205, 138, 46, 29, 131, 20, 2, 106, 235, 88, 64, 85, 23, 202, 79 },
                            Role = "Admin",
                            Telephone = "20123123",
                            VerificationCode = ""
                        });
                });

            modelBuilder.Entity("API.Models.CartEvenement", b =>
                {
                    b.HasOne("API.Models.Carte", "Carte")
                        .WithMany("CartEvenements")
                        .HasForeignKey("CarteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Template", "Template")
                        .WithMany("CartEvenements")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carte");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("API.Models.Carte", b =>
                {
                    b.HasOne("API.Models.Client", "Client")
                        .WithMany("Cartes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("API.Models.Client", b =>
                {
                    b.HasOne("API.Models.Agence", "Agence")
                        .WithMany("Clients")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agence");
                });

            modelBuilder.Entity("API.Models.ClientNotification", b =>
                {
                    b.HasOne("API.Models.Client", "Client")
                        .WithMany("ClientNotifications")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Notification", "Notification")
                        .WithMany("ClientNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("API.Models.Compte", b =>
                {
                    b.HasOne("API.Models.Client", "Client")
                        .WithMany("Comptes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("API.Models.Credit", b =>
                {
                    b.HasOne("API.Models.Compte", "Compte")
                        .WithMany("Credits")
                        .HasForeignKey("CompteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compte");
                });

            modelBuilder.Entity("API.Models.CreditEvenement", b =>
                {
                    b.HasOne("API.Models.Credit", "Credit")
                        .WithMany("CreditEvenements")
                        .HasForeignKey("CreditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Template", "Template")
                        .WithMany("CreditEvenements")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credit");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("API.Models.Message", b =>
                {
                    b.HasOne("API.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Template", b =>
                {
                    b.HasOne("API.Models.Category", "Category")
                        .WithMany("Templates")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.HasOne("API.Models.Agence", "Agence")
                        .WithMany("Users")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agence");
                });

            modelBuilder.Entity("API.Models.Agence", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Models.Carte", b =>
                {
                    b.Navigation("CartEvenements");
                });

            modelBuilder.Entity("API.Models.Category", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("API.Models.Client", b =>
                {
                    b.Navigation("Cartes");

                    b.Navigation("ClientNotifications");

                    b.Navigation("Comptes");
                });

            modelBuilder.Entity("API.Models.Compte", b =>
                {
                    b.Navigation("Credits");
                });

            modelBuilder.Entity("API.Models.Credit", b =>
                {
                    b.Navigation("CreditEvenements");
                });

            modelBuilder.Entity("API.Models.Notification", b =>
                {
                    b.Navigation("ClientNotifications");
                });

            modelBuilder.Entity("API.Models.Template", b =>
                {
                    b.Navigation("CartEvenements");

                    b.Navigation("CreditEvenements");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
